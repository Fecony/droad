app droad {
  wasp: {
    version: "^0.7.3"
  },

  title: "droad",

  head: [
    "<link rel='preconnect' href='https://fonts.bunny.net'>",
    "<link href='https://fonts.bunny.net/css?family=inter:500,700,900' rel='stylesheet' />"
  ],

  db: {
    system: PostgreSQL
  },

  client: {
    setupFn: import mySetupFunction from "@client/myClientSetupCode.js"
  },

  auth: {
    methods: {
      usernameAndPassword: {},
      // google: {},
      // github: {}, // NOTE: Fingers crossed üêù
    },
    userEntity: User,
    externalAuthEntity: SocialAuth,
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/",
  },

  dependencies: [
    ("@tailwindcss/forms", "^0.5.3"),
    ("phosphor-react", "^1.4.1"),
    ("class-variance-authority", "^0.4.0"),
    ("clsx", "^1.2.1"),
    ("windy-radix-palette", "^0.4.1"),
    ("@radix-ui/colors", "^0.1.8"),
    ("zod", "^3.20.0"),
    ("react-hot-toast", "^2.4.0")
  ],
}

// ----------------- Pages ------------------ //

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/pages/MainPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/SignupPage"
}

// TODO: when mvp will be ready for use by other people
// route RoadmapViewRoute { path: "/roadmap/:roadmapId", to: RoadmapViewPage }
// page RoadmapViewPage {
//   component: import ViewPage from "@client/pages/roadmap/ViewPage"
// }

// ----------------- Entities ------------------ //

entity User {=psl
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String?  @unique
  password   String   // TODO: ask about password field being optional with social + usernameAndPassword auth methods
  avatar     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  roadmaps  Roadmap[]
  upvotedFeatures           RoadmapFeature[]  @relation("UpvotedFeatures")
  externalAuthAssociations  SocialAuth[]
  // comments                  Comment[]
psl=}

entity SocialAuth {=psl
  id          Int      @id @default(autoincrement())
  userId      Int
  provider    String
  providerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId, userId])
psl=}

entity Roadmap {=psl
  id           String  @id @default(cuid())
  title        String
  description  String?
  authorId     Int
  // settings     Json // TODO: customize roadmap settings
  // customStatuses String[] // TODO: custom statuses for features
  // collaborators  User[] // TODO: allow to invite other users to work on roadmap (will allow them to change settings, etc)

  features  RoadmapFeature[]

  author  User  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
psl=}

entity RoadmapFeature {=psl
  id           String   @id @default(cuid())
  title        String
  description  String?
  votes        Int      @default(0)
  // comments     Comment[] // TODO: option to comment on features! if allowed
  // status     String | Status // TODO: relation with status

  roadmapId  String?
  roadmap    Roadmap?  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  upvotedBy  User[]   @relation("UpvotedFeatures")

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
psl=}

// entity Comment {=psl
//   id               String @id @default(cuid())
//   text             String
//   authorId         Int
//   roadmapFeatureId String

//   author   User            @relation(fields: [authorId], references: [id])
//   feature  RoadmapFeature  @relation(fields: [roadmapFeatureId], references: [id])

//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
// psl=}

// ----------------- X operations ------------------ //

// TODO: remove? leave just for mvp
query getRoadmaps {
  fn: import { getRoadmaps } from "@server/roadmap/queries.js",
  entities: [Roadmap]
}

query getRoadmap {
  fn: import { getRoadmap } from "@server/roadmap/queries.js",
  entities: [Roadmap]
}

query getDemoRoadmap {
  fn: import { getDemoRoadmap } from "@server/roadmap/queries.js",
  entities: [Roadmap]
}

action voteForFeature {
  fn: import { voteForFeature } from "@server/feature/actions.js",
  entities: [Roadmap, RoadmapFeature]
}